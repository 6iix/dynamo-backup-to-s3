#!/usr/bin/env node

var program = require('commander'),
    fs = require('fs'),
    moment = require('moment'),
    DynamoRestore = require('../').DynamoRestore;


program
    .version(JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version)
    .usage('[options] -s "s3://mybucket/path/to/file.json" -t "new-dynamodb-table"')
    .option('-s, --source [path]', 'Full S3 path to a JSON backup file (Required)')
    .option('-t, --table [name]', 'Name of the Dynamo Table to restore to (Required)')
    .option('-c, --concurrency <requestcount>', 'Number of concurrent requests to run in paralell. Defaults to 25.')
    .option('-pk, --partitionkey [columnname]', 'Name of Primary Partition Key. Will try determine from backup if not available.')
    .option('-sk, --sortkey [columnname]', 'Name of Secondary Sort Key. Ignored unless --partitionkey is provided.')
    .option('-rc, --readcapacity <units>', 'Read Units for new table (when finished). Default is 5.')
    .option('-wc, --writecapacity <units>', 'Write Units for new table (when finished). Default is 5.')
    .option('--aws-key <key>', 'AWS access key. Will use AWS_ACCESS_KEY_ID env var if --aws-key not set')
    .option('--aws-secret <secret>', 'AWS secret key. Will use AWS_SECRET_ACCESS_KEY env var if --aws-secret not set')
    .option('--aws-region <region>', 'AWS region. Will use AWS_DEFAULT_REGION env var if --aws-region not set')
    .option('--debug', 'Runs on debug mode')
    .parse(process.argv);

// Display help if needed
if (!program.source || !program.table) {
  program.outputHelp();
  process.exit(-1);
  return;
}

var runTimes = {
	start: moment()
};

// Initialize
var dynamoRestore = new DynamoRestore({
    // Main settings
	source: program.source,
	table: program.table,
	concurrency: program.concurrency,
    // New table properties
	partitionkey: program.partitionkey,
    sortkey: program.sortkey,
    readcapacity: program.readcapacity,
    writecapacity: program.writecapacity,
    // Authentication
    awsKey: program.awsKey,
    awsSecret: program.awsSecret,
    awsRegion: program.awsRegion,
    // Development
    debug: program.debug
});

function translate(contentLength) {
    var kb = contentLength / 1024,
        mb = kb / 1024,
        gb = mb / 1024;
    return gb > 1 ? gb.toFixed(0) + ' Gb' : 
            (mb > 1 ? mb.toFixed(0) + 'Mb' :
                    kb.toFixed(0) + 'Kb');  
}

// Define events
dynamoRestore.on('error', function(message) {
    console.log(message);
    process.exit(-1);
});

dynamoRestore.on('start-download', function(streamMeta) {
    var time = runTimes.startDownload = moment();
    console.log('Starting download. %s remaining...', translate(streamMeta.ContentLength));
});

dynamoRestore.on('finish-download', function() {
    console.log('Finished downloading from S3. Processing remaining batches.. ');
});

dynamoRestore.on('send-batch', function(batches, requests, streamMeta) {
    console.log('Batch sent. %d concurent requests. %s remaining to download...', requests, translate(streamMeta.ContentLength));
});

// Start Process
dynamoRestore.run(function() {
	var time = runTimes.end = moment();
	console.log('Done! Process completed in %s minutes %s seconds.', time.diff(runTimes.start, 'minutes'), time.diff(runTimes.start, 'seconds'));
	process.exit(0);
});


